services:
  # Redis缓存服务
  redis:
    image: redis:7-alpine
    container_name: paper_parser_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --save 60 1000
    restart: unless-stopped
    # 优化内存使用
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 128M
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 2s
      retries: 2
      start_period: 10s

  # Neo4j图数据库
  neo4j:
    image: neo4j:5
    container_name: paper_parser_neo4j
    ports:
      - "7687:7687"
      - "7474:7474"
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
    environment:
      - NEO4J_AUTH=neo4j/password
      - NEO4J_PLUGINS=["apoc"]
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*
      # 优化Neo4j启动性能
      - NEO4J_dbms_memory_heap_initial__size=256m
      - NEO4J_dbms_memory_heap_max__size=512m
      - NEO4J_dbms_memory_pagecache_size=256m
      - NEO4J_dbms_jvm_additional=-XX:+UseG1GC -XX:+UnlockExperimentalVMOptions -XX:+UseZGC
      - NEO4J_dbms_default__database=neo4j
    restart: unless-stopped
    # 资源限制
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '2.0'
        reservations:
          memory: 512M
          cpus: '1.0'
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "password", "RETURN 1"]
      interval: 15s
      timeout: 5s
      retries: 2
      start_period: 60s

  # API服务（默认生产环境配置）
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: paper_parser_api
    ports:
      - "8000:8000"
    volumes:
      - .:/app
    environment:
      - DEBUG=false
      - REDIS_URL=redis://redis:6379/0
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=password
      - ENABLE_SEARCH_BACKGROUND_INGEST=true
      - SEARCH_BACKGROUND_INGEST_TOP_N=3
    depends_on:
      redis:
        condition: service_healthy
      neo4j:
        condition: service_healthy
    restart: unless-stopped
    # 移除profiles，默认启动


  # ARQ Worker（轻量任务队列）
  arq-worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: paper_parser_arq
    command: arq app.tasks.worker.WorkerSettings
    volumes:
      - .:/app
    environment:
      - REDIS_URL=redis://redis:6379/0
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=password
      - DEBUG=false
    depends_on:
      redis:
        condition: service_healthy
      neo4j:
        condition: service_healthy
    restart: unless-stopped
    # 移除profiles，默认启动ARQ worker

    # 为 worker 覆盖健康检查（不再使用镜像中的 HTTP 健康检查）
    healthcheck:
      test: ["CMD-SHELL", "python - <<'PY'\nimport os,socket,sys;host=os.getenv('REDIS_HOST','redis');port=int(os.getenv('REDIS_PORT','6379'));s=socket.create_connection((host,port),2);s.close();print('ok')\nPY"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 15s



volumes:
  redis_data:
    driver: local
  neo4j_data:
    driver: local
  neo4j_logs:
    driver: local

networks:
  default:
    name: paper_parser_network
