version: '3.8'

services:
  # Redis缓存服务
  redis:
    image: redis:7-alpine
    container_name: paper_parser_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # Neo4j图数据库
  neo4j:
    image: neo4j:5
    container_name: paper_parser_neo4j
    ports:
      - "7687:7687"
      - "7474:7474"
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
    environment:
      - NEO4J_AUTH=neo4j/password
      - NEO4J_PLUGINS=["apoc"]
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*
      - NEO4J_dbms_memory_heap_initial_size=512m
      - NEO4J_dbms_memory_heap_max_size=2G
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "password", "RETURN 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 开发环境API服务
  api-dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: paper_parser_api_dev
    ports:
      - "8000:8000"
    volumes:
      - .:/app
      - /app/__pycache__
    environment:
      - DEBUG=true
      - RELOAD=true
      - REDIS_URL=redis://redis:6379/0
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=password
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
    depends_on:
      redis:
        condition: service_healthy
      neo4j:
        condition: service_healthy
    restart: unless-stopped
    profiles: ["dev"]

  # Celery Worker (高优先级)
  celery-worker-high:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: paper_parser_celery_high
    command: celery -A app.tasks.celery_app worker -Q high_priority -c 4 --loglevel=info
    volumes:
      - .:/app
    environment:
      - REDIS_URL=redis://redis:6379/0
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=password
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
    depends_on:
      redis:
        condition: service_healthy
      neo4j:
        condition: service_healthy
    restart: unless-stopped
    profiles: ["dev", "celery"]

  # Celery Worker (中优先级)
  celery-worker-medium:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: paper_parser_celery_medium
    command: celery -A app.tasks.celery_app worker -Q medium_priority -c 2 --loglevel=info
    volumes:
      - .:/app
    environment:
      - REDIS_URL=redis://redis:6379/0
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=password
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
    depends_on:
      redis:
        condition: service_healthy
      neo4j:
        condition: service_healthy
    restart: unless-stopped
    profiles: ["celery"]

  # Celery Flower (任务监控)
  celery-flower:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: paper_parser_flower
    command: celery -A app.tasks.celery_app flower --port=5555
    ports:
      - "5555:5555"
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
    depends_on:
      - redis
    restart: unless-stopped
    profiles: ["celery", "monitoring"]

volumes:
  redis_data:
    driver: local
  neo4j_data:
    driver: local
  neo4j_logs:
    driver: local

networks:
  default:
    name: paper_parser_network
